{"remainingRequest":"/Users/xyy/Desktop/前端开发/project/BankSystemFront-xkq/node_modules/babel-loader/lib/index.js!/Users/xyy/Desktop/前端开发/project/BankSystemFront-xkq/src/mock/bank.js","dependencies":[{"path":"/Users/xyy/Desktop/前端开发/project/BankSystemFront-xkq/src/mock/bank.js","mtime":1539942342000},{"path":"/Users/xyy/Desktop/前端开发/project/BankSystemFront-xkq/node_modules/cache-loader/dist/cjs.js","mtime":1540002788970},{"path":"/Users/xyy/Desktop/前端开发/project/BankSystemFront-xkq/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var Mock = require('mockjs');\n\nvar Random = Mock.Random;\nexport var bank = [{\n  path: '/loan/record',\n  type: 'get',\n  data: function data(option) {\n    var req = JSON.parse(option.body);\n    var result = {\n      status: 200,\n      msg: '',\n      data: []\n    };\n\n    for (var i = 0; i < 100; i++) {\n      var loan = {\n        transId: Random.integer(0, 1000000),\n        name: Random.cname(),\n        loanDate: 1539911101000,\n        loanAmount: Random.float(0, 1000000),\n        insCount: Random.integer(0, 1000000),\n        loanInterest: Random.float(0, 1),\n        loanAmountSum: Random.float(0, 1000000),\n        recoveredAmount: Random.float(0, 1000000),\n        loanStatus: Random.integer(0, 3)\n      };\n      result.data.push(loan);\n    }\n\n    return result;\n  }\n}, {\n  path: '/loan',\n  type: 'get',\n  data: function data(option) {\n    var req = JSON.parse(option.body);\n    var result = {\n      status: 200,\n      msg: '',\n      data: {\n        loan: {}\n      }\n    };\n    var loan = {\n      transId: Random.integer(0, 1000000),\n      account: Random.integer(0, 1000000),\n      transDate: 1539911101000,\n      loanAmount: Random.integer(0, 1000000),\n      insCount: Random.integer(0, 30),\n      loanInterest: Random.float(0, 1),\n      loanAmountSum: Random.integer(0, 1000000),\n      expirationDate: 1539911101000,\n      recoveredAmount: Random.integer(0, 1000000),\n      loanStatus: Random.integer(1, 3),\n      loadTypeName: Random.string(1, 5),\n      reviewId: Random.string(1, 5)\n    };\n    result.data.loan = loan;\n    console.log(result);\n    return result;\n  }\n}, {\n  path: '/loan/payment',\n  type: 'get',\n  data: function data(option) {\n    var req = JSON.parse(option.body);\n    var result = {\n      status: 200,\n      msg: '',\n      data: {\n        bankPayment: []\n      }\n    };\n\n    for (var i = 0; i < 10; i++) {\n      var payment = {\n        paymentId: Random.integer(1, 1000),\n        insNum: i + 1,\n        paymentAmount: Random.integer(1, 1000),\n        paymentDate: 1539911101000\n      };\n      result.data.bankPayment.push(payment);\n    }\n\n    return result;\n  }\n}];",{"version":3,"sources":["/Users/xyy/Desktop/前端开发/project/BankSystemFront-xkq/src/mock/bank.js"],"names":["Mock","require","Random","bank","path","type","data","option","req","JSON","parse","body","result","status","msg","i","loan","transId","integer","name","cname","loanDate","loanAmount","float","insCount","loanInterest","loanAmountSum","recoveredAmount","loanStatus","push","account","transDate","expirationDate","loadTypeName","string","reviewId","console","log","bankPayment","payment","paymentId","insNum","paymentAmount","paymentDate"],"mappings":"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","sourcesContent":["const Mock = require('mockjs');\nconst Random = Mock.Random;\n\nexport const bank = [{\n    path: '/loan/record',\n    type: 'get',\n    data(option) {\n        let req = JSON.parse(option.body);\n        let result = {\n            status: 200,\n            msg: '',\n            data: []\n        };\n        for (let i = 0; i < 100; i++) {\n            let loan = {\n                transId: Random.integer(0, 1000000),\n                name: Random.cname(),\n                loanDate: 1539911101000,\n                loanAmount: Random.float(0, 1000000),\n                insCount: Random.integer(0, 1000000),\n                loanInterest: Random.float(0, 1),\n                loanAmountSum: Random.float(0, 1000000),\n                recoveredAmount: Random.float(0, 1000000),\n                loanStatus: Random.integer(0, 3)\n            };\n            result.data.push(loan);\n        }\n        return result;\n    }\n}, {\n    path: '/loan',\n    type: 'get',\n    data(option) {\n        let req = JSON.parse(option.body);\n        let result = {\n            status: 200,\n            msg: '',\n            data:{\n                loan:{}\n            }\n        };\n        let loan = {\n            transId: Random.integer(0, 1000000),\n            account: Random.integer(0, 1000000),\n            transDate: 1539911101000,\n            loanAmount: Random.integer(0, 1000000),\n            insCount: Random.integer(0, 30),\n            loanInterest: Random.float(0, 1),\n            loanAmountSum: Random.integer(0, 1000000),\n            expirationDate: 1539911101000,\n            recoveredAmount: Random.integer(0, 1000000),\n            loanStatus: Random.integer(1, 3),\n            loadTypeName: Random.string(1, 5),\n            reviewId: Random.string(1, 5)\n        };\n        result.data.loan=loan;\n        console.log(result);\n        return result;\n    }\n},{\n    path: '/loan/payment',\n    type: 'get',\n    data(option) {\n        let req = JSON.parse(option.body);\n        let result = {\n            status: 200,\n            msg: '',\n            data:{\n                bankPayment:[]\n            }\n        };\n       for(let i=0;i<10;i++){\n           let payment={\n               paymentId:Random.integer(1,1000),\n               insNum:i+1,\n               paymentAmount:Random.integer(1,1000),\n               paymentDate:1539911101000\n           }; \n           result.data.bankPayment.push(payment);\n       }\n        return result;\n    }\n}];"]}]}
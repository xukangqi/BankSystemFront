{"remainingRequest":"/Users/xyy/Documents/GitHub/BankSystemFront-xyy/node_modules/babel-loader/lib/index.js!/Users/xyy/Documents/GitHub/BankSystemFront-xyy/src/mock/user.js","dependencies":[{"path":"/Users/xyy/Documents/GitHub/BankSystemFront-xyy/src/mock/user.js","mtime":1540090490389},{"path":"/Users/xyy/Documents/GitHub/BankSystemFront-xyy/node_modules/cache-loader/dist/cjs.js","mtime":1540002788970},{"path":"/Users/xyy/Documents/GitHub/BankSystemFront-xyy/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var Mock = require('mockjs');\n\nvar Random = Mock.Random;\nexport var user = [{\n  path: '/user/userinfo',\n  type: 'get',\n  data: function data(option) {\n    var req = JSON.parse(option.body);\n    var result = {\n      status: 200,\n      msg: '',\n      data: []\n    };\n\n    for (var i = 0; i < 1000; i++) {\n      var _user = {\n        username: Random.cname(),\n        password: Random.integer(0, 10000000),\n        phonenum: Mock.mock({\n          'regexp': /^1[34578]\\d{9}$/\n        }),\n        userid: Random.integer(0, 10000000),\n        usertype: Random.integer(0, 1),\n        address: Random.county(true),\n        email: Random.email()\n      };\n      result.data.push(_user);\n    }\n\n    return result;\n  }\n}];",{"version":3,"sources":["/Users/xyy/Documents/GitHub/BankSystemFront-xyy/src/mock/user.js"],"names":["Mock","require","Random","user","path","type","data","option","req","JSON","parse","body","result","status","msg","i","username","cname","password","integer","phonenum","mock","userid","usertype","address","county","email","push"],"mappings":"AAAA,IAAMA,OAAOC,QAAQ,QAAR,CAAb;;AACA,IAAMC,SAASF,KAAKE,MAApB;AAEA,OAAO,IAAMC,OAAO,CAAC;AACpBC,QAAM,gBADc;AAEpBC,QAAM,KAFc;AAGpBC,MAHoB,gBAGfC,MAHe,EAGP;AACZ,QAAIC,MAAMC,KAAKC,KAAL,CAAWH,OAAOI,IAAlB,CAAV;AACA,QAAIC,SAAS;AACZC,cAAQ,GADI;AAEZC,WAAK,EAFO;AAGZR,YAAK;AAHO,KAAb;;AAKA,SAAI,IAAIS,IAAE,CAAV,EAAaA,IAAI,IAAjB,EAAuBA,GAAvB,EAA4B;AAC3B,UAAIZ,QAAO;AACVa,kBAAUd,OAAOe,KAAP,EADA;AAEVC,kBAAUhB,OAAOiB,OAAP,CAAe,CAAf,EAAkB,QAAlB,CAFA;AAGVC,kBAAUpB,KAAKqB,IAAL,CAAU;AACf,oBAAU;AADK,SAAV,CAHA;AAMVC,gBAAOpB,OAAOiB,OAAP,CAAe,CAAf,EAAkB,QAAlB,CANG;AAOVI,kBAASrB,OAAOiB,OAAP,CAAe,CAAf,EAAkB,CAAlB,CAPC;AAQVK,iBAAQtB,OAAOuB,MAAP,CAAc,IAAd,CARE;AASVC,eAAMxB,OAAOwB,KAAP;AATI,OAAX;AAWAd,aAAON,IAAP,CAAYqB,IAAZ,CAAiBxB,KAAjB;AACA;;AACD,WAAOS,MAAP;AACA;AAzBmB,CAAD,CAAb","sourcesContent":["const Mock = require('mockjs');\nconst Random = Mock.Random;\n\nexport const user = [{\n\tpath: '/user/userinfo',\n\ttype: 'get',\n\tdata(option) {\n\t\tlet req = JSON.parse(option.body);\n\t\tlet result = {\n\t\t\tstatus: 200,\n\t\t\tmsg: '',\n\t\t\tdata:[]\n\t\t};\n\t\tfor(let i=0; i < 1000; i++) {\n\t\t\tlet user = {\n\t\t\t\tusername: Random.cname(),\n\t\t\t\tpassword: Random.integer(0, 10000000),\n\t\t\t\tphonenum: Mock.mock({\n\t\t\t\t\t\t\t  'regexp': /^1[34578]\\d{9}$/\n\t\t\t\t\t\t\t}),\n\t\t\t\tuserid:Random.integer(0, 10000000),\n\t\t\t\tusertype:Random.integer(0, 1),\n\t\t\t\taddress:Random.county(true),\n\t\t\t\temail:Random.email(),\n\t\t\t};\n\t\t\tresult.data.push(user);\n\t\t}\n\t\treturn result;\n\t}\n}\n];"]}]}